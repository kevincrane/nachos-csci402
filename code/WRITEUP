Title: Writeup for Project 4, Fall 2011

Date: 11/25/2011

Group Num 8:  Name      Email             Student ID
    Kevin Crane         kevincra@usc.edu  3218277159
    Michelle Forcier    mforcier@usc.edu  7557790576
    Ryan Ball           rball@usc.edu     3005164367

I. Requirements

  Overall: Create a distributed system for allowing user programs across
	   multiple Nachos clients execute a single Movie Theater Simulation
	   without knowing about the other clients.

  Part 1:  Implement the Movie Theater across multiple Nachos clients, the server
	   wil. connect the clients together and user programs will not know that 
	   remote procedure calls are being used. The server connects the clients
	   and user programs. 

  Part 2:  Have up to 5 servers work together in a group. Each server can receive
	   any client request. Each has their own lock, CV, and monitor tables, but
	   they only store the locks, CVs, and MVs that they create.

  Part 3:  Create an algorithm to decide which user program should receive a lock
	   when a user program who had the lock has failed. There should be from 2
	   to 5 user programs. The servers should detect when a user program that owns
	   a lock has died and give it to the next waiting thread (or make it free).


II. Assumptions: 

	There is a limit on the size of an array the user can use for a MV.
	The servers will have Machine IDs from 0 to the number of servers minus one.

III. Design: 
- This section is to cover your logic and ideas as to how  you are going to 
  solve the problem presented.  This should include a description of classes, 
  algorithms, etc. 

  Part 1: The movie theater was distributed by breaking up every entity of the
    theater (Customer, MovieTech, TicketClerk, etc.). Each entity was made into
    a new user program. In order to sync values between each other, a single
    universal header file was created (creates.h). This was full of local and
    global values (through MonitorVariables) that allowed all the entities of the
    movie theater to communicate.
    
    The whole theater was built through two groups of entities (dist_theater1 and
    dist_theater2). When these were run in sequence, the server handles all
    interactions between the theater entities, letting the whole theater run
    itself as one to completion.

  Part 2: Changed the Server function to queue up requests as they come in. Then,
	  it pulls the request off of the queue and processes it. First, it checks
	  if the request is from a client program, if so it sees if it has the lock,
	  CV, or MV requested. If it does have the lock, CV, or MV it simply calls the
	  function corresponding with the requested action, if not, it sends a message
	  to all servers asking them if they have the lock, CV, or MV. If a server
	  receives a "Do You Have" message, it checks if it has the lock, CV, or MV
	  requested and sends a reply message with a yes or no back to the server who
	  sent the do you have message.If a server receives a reply message, they check
	  if it is a yes reply, if so, it sends the original client message to that
	  server. If it receives a no reply, it checks if it has received no replies 
	  from all servers, if so, it sends an error. 

	  On Wait, Signal, and Broadcast, if the server does not have the CV, it finds
	  the server that does and forwards the message there. If it does not have the
	  lock, it finds the server with the lock, sends an Acquire or Release request
          as necessary and mainipulates the CV waitlist.

	  Changed most syscalls to take in a name instead of an index.

  Part 3: Every loop of ther server, the server cycles through all of its entities
    and pings them, checking to see if they respond (i.e. if they still exist).
    If not, it takes the appropriate assets to copy them to a working nachos
    instance.
   

IV. Implementation: 

    + Files Modified 

      WRITEUP

      Userprog Folder:  exception.cc
                        syscall.h

      Threads Folder:   main.cc

      Test Folder:      networktests.c
                        
      Network Folder:   server.cc

    + Files added 

    + Data Structures added, and the file they were added to. 

      struct PendingRequest {                   -- server.cc
	char* name;
	int type;
	int numberOfNoReplies;
	char* originalClientMsg;
	int clientMachineID;
	int clientMailboxID;
	int timestamp;	
	List* pendingDYH;
	bool active;
      };

      struct waitingMsg {                       -- server.cc
	char* msg;
	int fromMachineID;
	int fromMailboxID;
	int timestamp;
      };

      waitingMsg waitingMsgs[MAX_REQUESTS];     -- server.cc
     
      PendingRequest pendingRequests[MAX_REQUESTS]; -- server.cc

      int nextPR;                               -- server.cc
 
      int nextMsg;                              -- server.cc
            
    + Data Structures modified, and the file they were added to. 
          
      
    + Functions added and in which file. 

    + Functions modified and in which file. 

        void Server(int machineID, int numServers)      -- server.cc
        void Acquire_Syscall(unsigned int strPtr, int length); -- exception.cc
	void Release_Syscall(unsigned int strPtr, int length); -- exception.cc
	void Wait_Syscall(unsigned int cvStrPtr, int cvLength, 
	                  unsigned int lockStrPtr, int lockLength); -- exception.cc
	void Signal_Syscall(unsigned int cvStrPtr, int cvLength,
	                    unsigned int lockStrPtr, int lockLength); -- exception.cc
	void Broadcast_Syscall(unsigned int cvStrPtr, int cvLength, 
	                       unsigned int lockStrPtr, int lockLength); -- exception.cc
	void DestroyLock_Syscall(unsigned int strPtr, int length); -- exception.cc
	void DestroyCondition_Syscall(unsigned int strPtr, int length); -- exception.cc
	void DestroyMV_Syscall(unsigned int strPtr, int length); -- exception.cc
	void SetMV_Syscall(unsigned int strPtr, int length, int value, int arrayIndex); -- exception.cc
	int GetMV_Syscall(int strPtr, int length, int arrayIndex); -- exception.cc
	void ExceptionHandler(ExceptionType which); -- exception.cc

V. Testing:  (For each test case, you must show)
    + How to test
    
      Part 1: The nachos OS is currently set up to work for Part 1, the distributed movie theater.
        Unfortunately, due to us being forced from different locations because of Thanksgiving break,
        our distributed movie theater does not work outside of part 1 with a single server. We have
        built tests for parts 2 and 3 which are explained in the next sub-sections. To test Part 1,
        do the following:
          In window 1 (from network folder): nachos -s
          In window 2: nachos -m 1 -x ../test/dist_theater1
          In window 3: nachos -m 2 -x ../test/dist_theater2
          
        If it works, you should see "Movie Theater simulation completed successfully!!" in Window 3
        and "Everyone has left, Manager is closing the theater. Good work boys!" in Window 2. Due to
        issues involving timing in the servers, occasionally it gets stuck. If this happens, close all
        three nachos instances and try again. It works a vast majority of the time, but be aware that
        this sometimes is not the case.

      Part 2: Since out part 2 is not working with our movie theater. You need to go into exception.cc
	      server.cc, main.cc, and syscall.h and comment out the
	      version for Part 1 and uncomment the version for Part 2 (tagged with PART 2; Ctrl-F "PART 2"). 
	      The same applies in main.cc on lines 68 and 166.
	
	      Create nachos instances for the servers. Then run nachos -m [machineID - something unique from
	      0 to number of servers - 1] -s [machineID] [num servers], for example, if 3 servers you would
	      have nachos -m 0 -s 0 3, nachos -m 1 -s 1 3, and nachos -m 2 -s 2 3. Then run the client with
	      nachos -m [number greater than num servers - 1] -x [test file], so for our tests it's
	      nachos -m 3 -x ../test/networktests. 
	      
	      If you have any issues with adjusting the files for Part 2, please email either mforcier@usc.edu
	      or kevincra@usc.edu. We'll gladly help you out whenever you like, as we understand we might've
	      made it more complicated for you than it should be. Thanks!
	      
	    Part 3: Again, unfortunately our extra credit does not work with our movie theater (though if I
	      remember correctly, Professor Crowley said this was alright). To test the extra credit please 
	      uncomment the method CheckTerminated() in server.cc (Ctrl-F "PART 3"). To test this, compile 
	      the test folder and run the server first and then test with the file "../test/terminatetest". 
	      This creates a lock and acquires it so if it gets terminated the server will check and assign
	      it to the next waiting thread.

    + Test Output
    
*** FOR Part 1 ***
        If it works, you should see "Movie Theater simulation completed successfully!!" in Window 3
        and "Everyone has left, Manager is closing the theater. Good work boys!" in Window 2. Due to
        issues involving timing in the servers, occasionally it gets stuck. If this happens, close all
        three nachos instances and try again. It works a vast majority of the time, but be aware that
        this sometimes is not the case.
        
        
    
*** LOCK TEST ***


Testing CreateLock. Calling CreateLock('a', 1).
Lock Index: 0.
Lock syscall successful.
Testing Many Lock syscalls. Calling CreateLock() 9 times
Lock Index: 0.
Lock Index: 1.
Lock Index: 0.
Lock Index: 1.
Lock Index: 2.
Lock Index: 2.
Lock Index: 3.
Lock Index: 3.
Lock Index: 4.
Many locks created finished!
Testing making a lock with the same name.
Lock Index: 0.
SUCCESS the indices match.
Testing Destroy Lock. Calling DestroyLock()
Testing Destroy Lock syscall with a negative index.
ERROR.
Testing Destroy Lock sys call with a lock index of 12 (Larger than next index)
Testing Destroy Lock on already destroyed lock
ERROR.
Acquiring unused lock_10 to check destroy_Lock
Sending a message to 2.
ERROR.
Destroying Lock 10!!!
ERROR.

*** MV TEST ***
Testing Create MV. Calling CreateMV('a',1,5)
Testing Create MV 9 more times
Testing Create MV with the same name.
SUCCESS the indices match
Testing SetMV.
Testing Set with bad indices.
Testing Set with bad array indices.
ERROR.
Testing Set on  a deleted MV.
ERROR.
Testing Get.
ERROR.
Testing getting an MV with a bad index.
ERROR.
ERROR.
Testing MV Get with bad array indices.
ERROR.
ERROR.
Testing MV Get on a deleted MV.
ERROR.
Testing destroy MV.
Testing destroy on bad indices.
ERROR.
Testing destroy on a deleted MV.
ERROR.

*** CV TEST ***
Testing Create CV. Calling CreateCV()
Testing Create CV 9 more times
SUCCESS the indices are the same.
Testing Destroy CV. Destroying cv_1
Testing Destroy CV on a negative index
Testing Destroy CV on index of 12 (Larger than next index)
Testing Destroy CV on index 11
Testing Destroy CV on already deleted CV, cv_1

*** ACQUIRE TEST ***
Testing Acquire on lock_2
Sending a message to 2.
ERROR.
Testing Acquire on negative index
Sending a message to 2.
ERROR.
Testing Acquire on out of bounds index
Sending a message to 2.
ERROR.
Testing Acquire on on deleted lock, lock_1
Sending a message to 0.
ERROR.

*** RELEASE TEST ***
Testing Release on lock_2
Testing Release on lock_2 again
ERROR.
Testing Release on negative index
ERROR.
Testing Release on out of bounds index
Testing Release on deleted lock, lock_1
ERROR.
Testing Wait on a negative cv index
ERROR.
Testing Wait on a out of bounds cv index
ERROR.
Testing Wait on a negative lock index
ERROR.
Testing Wait on a out of bounds lock index
ERROR.
Testing Wait on a deleted cv
ERROR.
Testing Wait on a deleted lock
ERROR.

*** SIGNAL TEST ***
Testing Signal on negative cv index
ERROR.
Testing Signal on a out of bounds cv index
ERROR.
Testing Signal on a out of bounds lock index
ERROR.
Testing Signal on a negative lock index
ERROR.
Testing Signal on deleted cv
ERROR.
Testing Signal on deleted lock
ERROR.

*** BROADCAST TEST ***
Testing Broadcast on negative cv index
ERROR.
Testing Broadcast on out of bounds cv index
ERROR.
Testing Broadcast on negative lock index
ERROR.
Testing Broadcast on out of bounds lock index
ERROR.
Testing Broadcast on deleted cv
Testing Broadcast on deleted lock
ERROR.



*** END OF TESTING BEFORE EXIT ***

      

VI. Discussion: 
    + Experiment expectation.  (What you hope will happen.) 
      - We hope to be able to create both a user program distributed across 
        multiple clients and a distributed server across multiple nachos 
        instances.
      - As extra credit, we hope to allow the nachos system to detect when
        servers or clients are deceased and automatically fix the situation.

    + Experiment result.  (What actually happens.) 
      - The distributed client was successful, allowing for a distributed 
        movie theater. Winner.
      - The distributed server works for the most part, faltering during our tests
        with the distributed movie theater.
      - The extra credit assignment to detect broken instances works to an
        extent as well.

    + Explanation 
      - The problems with our assignment are mostly due to us being separated
        geographically because of Thanksgiving break. It's hard to work on an
        assignment like this outside of the same room. :(
      - We understand parts of the movie theater do not work as required in 
        Project 1 from the beginning of the semester. This is not a new feature,
        it has been this way from the start, and unfortunately has not been 
        entirely fixed since then. The theater IS better now than it used to be,
        but it has not been fully fixed. Keep in mind that the theater does 
        demonstrate the distributed user program aspects as expected, and that
        the points for a faulty theater have been deducted in Projects 1 and 2.
        We'll love you if you don't re-take off points for these same issues 
        again (unless of course if they are related to being a distributed program). <3

VII. Miscellaneous: 




I love you.
